{
  "version": 3,
  "sources": ["../../.temp/blog/category.js", "../../.temp/blog/store.js", "../../.temp/blog/type.js", "../../../../node_modules/.pnpm/@vuepress+plugin-blog@2.0.0-rc.57_vuepress@2.0.0-rc.18_@vuepress+bundler-vite@2.0.0-rc.7_@typ_3ddzvjcfubjxudx33qxtelsudi/node_modules/@vuepress/plugin-blog/src/client/composables/useBlogCategory.ts", "../../../../node_modules/.pnpm/@vuepress+plugin-blog@2.0.0-rc.57_vuepress@2.0.0-rc.18_@vuepress+bundler-vite@2.0.0-rc.7_@typ_3ddzvjcfubjxudx33qxtelsudi/node_modules/@vuepress/plugin-blog/src/client/composables/useBlogType.ts"],
  "sourcesContent": ["export const categoriesMap = {\"category\":{\"/\":{\"path\":\"/category/\",\"map\":{\"History\":{\"path\":\"/category/history/\",\"indexes\":[0,1]},\"CategoryA\":{\"path\":\"/category/categorya/\",\"indexes\":[2,3,4,5,6,7,8,9,10,11,12,13]},\"CategoryB\":{\"path\":\"/category/categoryb/\",\"indexes\":[2,3,4,5,6,7,8,10,11,12]},\"CategoryC\":{\"path\":\"/category/categoryc/\",\"indexes\":[14,15]}}}},\"tag\":{\"/\":{\"path\":\"/tag/\",\"map\":{\"WWI\":{\"path\":\"/tag/wwi/\",\"indexes\":[1]},\"WWII\":{\"path\":\"/tag/wwii/\",\"indexes\":[0]},\"tag A\":{\"path\":\"/tag/tag-a/\",\"indexes\":[5,6,7,8,9,13]},\"tag B\":{\"path\":\"/tag/tag-b/\",\"indexes\":[5,6,7,8,9,13]},\"tag C\":{\"path\":\"/tag/tag-c/\",\"indexes\":[2,3,4,10,11,12]},\"tag D\":{\"path\":\"/tag/tag-d/\",\"indexes\":[2,3,4,10,11,12]},\"tag E\":{\"path\":\"/tag/tag-e/\",\"indexes\":[14,15]}}}}};\n\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n  if (__VUE_HMR_RUNTIME__.updateBlogCategory)\n    __VUE_HMR_RUNTIME__.updateBlogCategory(categoriesMap);\n}\n\nif (import.meta.hot)\n  import.meta.hot.accept(({ categoriesMap }) => {\n    __VUE_HMR_RUNTIME__.updateBlogCategory(categoriesMap);\n  });\n\n", "export const store = [\"/posts/archive2.html\",\"/posts/archive1.html\",\"/posts/article9.html\",\"/posts/article8.html\",\"/posts/article7.html\",\"/posts/article6.html\",\"/posts/article5.html\",\"/posts/article4.html\",\"/posts/article3.html\",\"/posts/article2.html\",\"/posts/article12.html\",\"/posts/article11.html\",\"/posts/article10.html\",\"/posts/article1.html\",\"/posts/sticky2.html\",\"/posts/sticky.html\"];\n", "export const typesMap = {\"article\":{\"/\":{\"path\":\"/article/\",\"indexes\":[14,15,10,11,12,2,3,4,5,6,7,8,9,13]}},\"timeline\":{\"/\":{\"path\":\"/timeline/\",\"indexes\":[10,11,12,2,3,4,5,6,7,8,9,13,15,14,0,1]}}};\n\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n  if (__VUE_HMR_RUNTIME__.updateBlogType)\n    __VUE_HMR_RUNTIME__.updateBlogType(typesMap);\n}\n\nif (import.meta.hot)\n  import.meta.hot.accept(({ typesMap }) => {\n    __VUE_HMR_RUNTIME__.updateBlogType(typesMap);\n  });\n\n", "import { categoriesMap } from '@temp/blog/category'\nimport { store } from '@temp/blog/store'\nimport type { ComputedRef } from 'vue'\nimport { computed, readonly, shallowRef } from 'vue'\nimport {\n  resolveRoute,\n  usePageData,\n  usePageFrontmatter,\n  useRouteLocale,\n} from 'vuepress/client'\nimport type {\n  BlogCategoryFrontmatterOptions,\n  CategoriesMap,\n} from '../../shared/index.js'\nimport type { BlogCategoryData } from '../typings.js'\n\ndeclare const __BLOG_META_SCOPE__: string\n\nconst categoryMapRef = shallowRef(categoriesMap)\n\nexport const blogCategoryMap = readonly(categoryMapRef)\n\nexport const useBlogCategory = <\n  T extends Record<string, unknown> = Record<string, unknown>,\n>(\n  key?: string,\n): ComputedRef<BlogCategoryData<T>> => {\n  const page = usePageData()\n  const frontmatter = usePageFrontmatter<{\n    blog?: BlogCategoryFrontmatterOptions\n  }>()\n  const routeLocale = useRouteLocale()\n\n  return computed(() => {\n    const mapKey = key ?? frontmatter.value.blog?.key ?? ''\n\n    if (!mapKey) {\n      // eslint-disable-next-line no-console\n      console.warn(`useBlogCategory: key not found`)\n\n      // Fallback data\n      return { path: '/', map: {} }\n    }\n\n    if (!(mapKey in categoryMapRef.value))\n      throw new Error(`useBlogCategory: key ${mapKey} is invalid`)\n\n    const currentMap = categoryMapRef.value[mapKey][routeLocale.value]\n    const result: BlogCategoryData<T> = {\n      path: currentMap.path,\n      map: {},\n    }\n\n    for (const category in currentMap.map) {\n      const categoryMap = currentMap.map[category]\n\n      result.map[category] = { path: categoryMap.path, items: [] }\n\n      for (const index of categoryMap.indexes) {\n        const { path, meta } = resolveRoute(store[index])\n\n        result.map[category].items.push({\n          path,\n          info:\n            __BLOG_META_SCOPE__ === ''\n              ? (meta as T)\n              : (meta[__BLOG_META_SCOPE__] as T),\n        })\n      }\n\n      if (page.value.path === categoryMap.path)\n        result.currentItems = result.map[category].items\n    }\n\n    return result\n  })\n}\n\nif (__VUEPRESS_DEV__ && (import.meta.webpackHot || import.meta.hot))\n  __VUE_HMR_RUNTIME__.updateBlogCategory = (value: CategoriesMap): void => {\n    categoryMapRef.value = value\n  }\n", "import { store } from '@temp/blog/store'\nimport { typesMap } from '@temp/blog/type'\nimport type { ComputedRef } from 'vue'\nimport { computed, readonly, shallowRef } from 'vue'\nimport {\n  resolveRoute,\n  usePageFrontmatter,\n  useRouteLocale,\n} from 'vuepress/client'\nimport type {\n  BlogTypeFrontmatterOptions,\n  TypesMap,\n} from '../../shared/index.js'\nimport type { BlogTypeData } from '../typings.js'\n\ndeclare const __BLOG_META_SCOPE__: string\n\nconst typeMapRef = shallowRef(typesMap)\n\nexport const blogTypeMap = readonly(typeMapRef)\n\nexport const useBlogType = <\n  T extends Record<string, unknown> = Record<string, unknown>,\n>(\n  key?: string,\n): ComputedRef<BlogTypeData<T>> => {\n  const frontmatter = usePageFrontmatter<{\n    blog?: BlogTypeFrontmatterOptions\n  }>()\n  const routeLocale = useRouteLocale()\n\n  return computed(() => {\n    const mapKey = key ?? frontmatter.value.blog?.key ?? ''\n\n    if (!mapKey) {\n      // eslint-disable-next-line no-console\n      console.warn(`useBlogType: key not found`)\n\n      // Fallback data\n      return { path: '/', items: [] }\n    }\n\n    if (!(mapKey in typeMapRef.value))\n      throw new Error(`useBlogType: key ${key} is invalid`)\n\n    const configMap = typeMapRef.value[mapKey][routeLocale.value]\n    const result: BlogTypeData<T> = {\n      path: configMap.path,\n      items: [],\n    }\n\n    for (const index of configMap.indexes) {\n      const { path, meta } = resolveRoute(store[index])\n\n      result.items.push({\n        path,\n        info:\n          __BLOG_META_SCOPE__ === ''\n            ? (meta as T)\n            : (meta[__BLOG_META_SCOPE__] as T),\n      })\n    }\n\n    return result\n  })\n}\n\nif (__VUEPRESS_DEV__ && (import.meta.webpackHot || import.meta.hot))\n  __VUE_HMR_RUNTIME__.updateBlogType = (value: TypesMap): void => {\n    typeMapRef.value = value\n  }\n"],
  "mappings": "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",
  "names": ["categoriesMap", "typesMap", "categoryMapRef", "shallowRef", "categoriesMap", "blogCategoryMap", "readonly", "useBlogCategory", "key", "page", "usePageData", "frontmatter", "usePageFrontmatter", "routeLocale", "useRouteLocale", "computed", "mapKey", "currentMap", "result", "category", "categoryMap", "index", "path", "meta", "resolveRoute", "store", "value", "typeMapRef", "typesMap", "blogTypeMap", "useBlogType", "configMap"]
}
