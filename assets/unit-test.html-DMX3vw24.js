import{_ as o,c as i,a as t,d as n,o as l}from"./app-D-gFUe8_.js";const r={};function a(s,e){return l(),i("div",null,e[0]||(e[0]=[t("h1",{id:"单元测试那些事",tabindex:"-1"},"单元测试那些事",-1),t("h3",{id:"单元测试的目标",tabindex:"-1"},"单元测试的目标",-1),t("p",null,"一个好的单元测试应该帮助我们达成以下目标：",-1),t("ul",null,[t("li",null,[t("strong",null,"全面的测试用例"),n("：单元测试应该尽可能覆盖所有可能的场景，包括正常流程、异常流程、边界条件等。从而帮助我们验证程序的正确性。")]),t("li",null,[t("strong",null,"改善代码设计"),n("：单元测试应该帮助我们改善代码设计，减少重复代码，提高代码的可维护性和可读性。")])],-1),t("h3",{id:"如何编写一个好的单元测试",tabindex:"-1"},"如何编写一个好的单元测试",-1)]))}const p=o(r,[["render",a],["__file","unit-test.html.vue"]]),m=JSON.parse('{"path":"/common-design/software-testing/unit-test.html","title":"单元测试那些事","lang":"en-US","frontmatter":{"description":"单元测试那些事 单元测试的目标 一个好的单元测试应该帮助我们达成以下目标： 全面的测试用例：单元测试应该尽可能覆盖所有可能的场景，包括正常流程、异常流程、边界条件等。从而帮助我们验证程序的正确性。 改善代码设计：单元测试应该帮助我们改善代码设计，减少重复代码，提高代码的可维护性和可读性。 如何编写一个好的单元测试","head":[["meta",{"property":"og:url","content":"https://abc/common-design/software-testing/unit-test.html"}],["meta",{"property":"og:site_name","content":"架构笔记"}],["meta",{"property":"og:title","content":"单元测试那些事"}],["meta",{"property":"og:description","content":"单元测试那些事 单元测试的目标 一个好的单元测试应该帮助我们达成以下目标： 全面的测试用例：单元测试应该尽可能覆盖所有可能的场景，包括正常流程、异常流程、边界条件等。从而帮助我们验证程序的正确性。 改善代码设计：单元测试应该帮助我们改善代码设计，减少重复代码，提高代码的可维护性和可读性。 如何编写一个好的单元测试"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-06T09:57:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T09:57:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单元测试那些事\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-06T09:57:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"单元测试的目标","slug":"单元测试的目标","link":"#单元测试的目标","children":[]},{"level":3,"title":"如何编写一个好的单元测试","slug":"如何编写一个好的单元测试","link":"#如何编写一个好的单元测试","children":[]}],"git":{"updatedTime":1730887045000,"contributors":[{"name":"zouyingjie","email":"yingjiezou1@gmail.com","commits":2,"url":"https://github.com/zouyingjie"}]},"autoDesc":true,"filePathRelative":"common-design/software-testing/unit-test.md","excerpt":"\\n<h3>单元测试的目标</h3>\\n<p>一个好的单元测试应该帮助我们达成以下目标：</p>\\n<ul>\\n<li><strong>全面的测试用例</strong>：单元测试应该尽可能覆盖所有可能的场景，包括正常流程、异常流程、边界条件等。从而帮助我们验证程序的正确性。</li>\\n<li><strong>改善代码设计</strong>：单元测试应该帮助我们改善代码设计，减少重复代码，提高代码的可维护性和可读性。</li>\\n</ul>\\n<h3>如何编写一个好的单元测试</h3>\\n"}');export{p as comp,m as data};
